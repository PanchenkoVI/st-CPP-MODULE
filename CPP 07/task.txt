#===============>
Exercise 00: A few functions

Turn-in directory : ex00/
Files to turn in : whatever.cpp and a Makefile
Allowed functions : None

Напишите следующие шаблоны функций:
swap: Сравните значения двух аргументов. Ничего не возвращайте.
min: Сравните два аргумента и верните наименьшее из них. Если два аргумента равны, тогда верните второй из них.
max: Сравните два аргумента и верните наибольшее из них. Если два аргумента равны, тогда верните второй из них.

Эти функции могут быть вызваны с любыми типами аргументов, с условием, что два аргумента имеют один и тот же тип и поддерживают все операторы сравнения. Обеспечите достаточным кодом для компиляции и исполнения чтобы доказать что все работает как предназначено.

int main(void) 
{
    int a = 2;
    int b = 3;
    
    ::swap( a, b );
    std::cout << "a = " << a << ", b = " << b << std::endl;
    std::cout << "min( a, b ) = " << ::min( a, b ) << std::endl;
    std::cout << "max( a, b ) = " << ::max( a, b ) << std::endl;
    
    std::string c = "chaine1";
    std::string d = "chaine2";
    
    ::swap(c, d);
    std::cout << "c = " << c << ", d = " << d << std::endl;
    std::cout << "min( c, d ) = " << ::min( c, d ) << std::endl;
    std::cout << "max( c, d ) = " << ::max( c, d ) << std::endl;
    return 0;
}

Should output the following if you did well:
a = 3, b = 2
min(a, b) = 2
max(a, b) = 3
c = chaine2, d = chaine1
min(c, d) = chaine1
max(c, d) = chaine2
#===============>
Exercise 01: Iter

Turn-in directory : ex01/
Files to turn in : iter.cpp and a Makefile
Allowed functions : None

Напишите шаблон функции iter которая принимает 3 параметра и возвращает ничего. Первый параметр адрес на массив, второй размер массива и третий функция которая вызывается на каждый элемент массива.

Оберните свою работу в исполняемый файл, который доказывает, что ваш шаблон функции работает с любым типом массива и/или с экземпляром шаблона функции в качестве третьего параметра.
#===============>
Exercise 02: Array

Turn-in directory : ex02/
Files to turn in : Array.hpp, or Array.tpp, or Array.h, or anything that makessens, plus anything necessary to build an executable, and a Makefile
Allowed functions : None

Напишите шаблон класса Array который содержит элементы типа T и который допускает следующее поведение:
    • Конструктор без параметров: создает пустой массив.
    • Конструктор с параметром "unsigned int n": создает массив n элементов, иницилизирует по дефолту. (Совет: попытайтесь скомпилировать "int * a = new int();" затем отобразить "*a")
    • Конструктор копирования и оператор присваивания. В обоих случаях изменение одного из двух массивов после копирования/присвоения не повлияет ни на что в другом массиве.
    • Вы должны использовать оператор new[] для вашей аллокации. Вы не должны делать превентивные выделения. Ваш код никогда не должен обращаться к не выделенной памяти.
    • Элементы доступны через operator[].
    • При обращении к элементу с помощью operator[], если этот элемент выходит за пределы выкиньте std::exception
    • size - член функций, которая возвращает количество элементов в массиве. Эта функция не принимает никаких параметров и никоим образом не изменяет текущий экземпляр.

Оберните свою работу в исполняемый файл, который докажет, что ваш шаблон класса работает так, как задумано.
#===============>