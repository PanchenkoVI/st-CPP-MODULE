#===============>
Глава 2

День специальных правил
Вы заметите, что в этой конкретной теме многие проблемы, которые вас просят решить, могут быть решены без использования стандартных контейнеров и без использования стандартных алгоритмов. Тем не менее, их использование-это именно цель, и если вы не приложите все усилия,чтобы использовать стандартные контейнеры и алгоритмы везде, где это уместно, вы получите очень плохую оценку, какой бы функциональной ни была ваша работа. Пожалуйста, не будь таким ленивым.
#===============>
Exercise 00: Easy find

Turn-in directory : ex00/
Files to turn in : easyfind.hpp main.cpp
Forbidden functions : None

Легко начать с правой ноги...
Создайте шаблонную функцию easyfind, шаблонную для типа T, которая принимает T и int.

Предположим, что T-это контейнер int, и найдите первое вхождение второго параметра в первый параметр.

Если он не может быть найден, обработайте ошибку либо с помощью исключения, либо с помощью значения возврата ошибки. Возьмите идеи из того, как работают стандартные контейнеры.
Конечно, вы предоставите основную функцию, которая тщательно ее тестирует.
#===============>
Exercise 01 : Span

Turn-in directory : ex01/
Files to turn in : span.cpp span.hpp main.cpp
Forbidden functions : None

Создайте класс в котором вы можете хранить N int's. N должен быть unsigned int, и должен быть пропущен через конструктор единственным параметром. 

Этот класс будет иметь функцию для хранения одиночного числа (addNumber), которая будет заполнять его. Попытка добавить новый номер, если он уже есть N из них хранящийся в объекте является ошибкой и должен привести к исключению.

Вы создадите две функции, shortestSpan и longestSpan, которые будут находить самый короткий и самый длинный промежуток между всеми числами содержащимися в объекте и вернут его. Если там нет сохраненных чисел или только одно, то нет никакого промежутка, который нужно найти,и вы создадите исключение.

Ниже приведен (слишком короткий) пример теста "main" и связанного с ним вывода. Конечно, ваш "main" будет намного тщательнее, чем этот. Вы должны проверить по крайней мере с числом 10000. Больше было бы хорошо. Было бы также очень хорошо, если бы вы могли добавлять числа, передавая диапазон итераторов, что позволило бы избежать раздражения от выполнения тысяч вызовов к addNumber...

int main()
{
    Span sp = Span(5);
    
    sp.addNumber(5);
    sp.addNumber(3);
    sp.addNumber(17);
    sp.addNumber(9);
    sp.addNumber(11);
    std::cout << sp.shortestSpan() << std::endl;
    std::cout << sp.longestSpan() << std::endl;
}

$> ./ex01
2
14
$>
#===============>
Exercise 02: Mutated abomination

Turn-in directory :ex02/
Files to turn in : mutantstack.cpp mutantstack.hpp main.cpp
Forbidden functions : None

Теперь, когда закуски закончились, давайте сделаем некоторые отвратительные вещи.

std::stack контейнер очень крутой, но это один из многих контейнеров которые не итерируются. Это тоже плохо. но зачем мириться с этим, когда мы можем просто играть в Бога и просто разделывать его, чтобы добавить что-то, что нам нравится?

Вы соедините эту способность в std::stack контейнер, чтобы исправить эту серьезную несправедливость.

Создайте MutantStack класс который будет реализовывать условия std::stack, и предложите все его функции-члены, только он также предложит итератор.

Ниже приведен пример кода, вывод которого должен быть таким же, как если бы мы заменили MutantStack с помощью, например, и std::list. Вы, конечно, предоставите тесты для всего этого в своей основной функции.

int main() 
{
    MutantStack<int>    mstack;

    mstack.push(5);
    mstack.push(17);

    std::cout << mstack.top() << std::endl;

    mstack.pop();

    std::cout << mstack.size() << std::endl;

    mstack.push(3);
    mstack.push(5);
    mstack.push(737);
    //[...]
    mstack.push(0);

    MutantStack<int>::iterator it = mstack.begin();
    MutantStack<int>::iterator ite = mstack.end();

    ++it;

    --it;

    while(it != ite)
    {
        std::cout << *it << std::endl;
        ++it;
    }
    std::stack<int> s(mstack);
    
    return 0;
}